{"version":3,"sources":["hooks/useVelocity.ts","hooks/useDirection.ts","hooks/useMovement.ts","hooks/useInterval.ts","components/Ball.tsx","components/Container.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["toRadians","angle","Math","PI","yComponent","velocity","cos","useVelocity","useRef","floor","random","horizVelocity","sin","xComponent","current","vertVelocity","changeVelocity","vertDirection","Error","useDirection","horizDirection","changeHorizDirection","direction","changeVertDirection","useMovement","ballSetup","handleRemoveBall","startCoords","containerRect","top","bottom","left","right","radius","energy","useState","x","setX","y","setY","moveVertical","useCallback","oldY","moveHorizontal","oldX","callback","delay","savedCallback","useEffect","id","setInterval","clearInterval","useInterval","setTimeout","BALL_COLORS","Ball","idx","position","style","height","width","backgroundColor","borderRadius","className","data-testid","Container","containerRef","balls","setBalls","setContainerRect","getBoundingClientRect","ballId","bls","updatedBalls","filter","bl","ref","onClick","event","clientX","clientY","b","map","ball","key","App","display","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VAGA,SAASA,EAAUC,GAEjB,OADgBA,GAASC,KAAKC,GAAK,KA2BrC,SAASC,EAAWH,EAAeI,GAGjC,OAF0BA,EAAWH,KAAKI,IAAIN,EAAUC,IAS3C,SAASM,EAAYN,GAClC,IAAMI,EAAWG,iBA9BAN,KAAKO,MAAsB,GAAhBP,KAAKQ,UAAiB,GA+B5CC,EAAgBH,iBAtBxB,SAAoBP,EAAeI,GAGjC,OAF0BA,EAAWH,KAAKU,IAAIZ,EAAUC,IAqBnBY,CAAWZ,EAAOI,EAASS,UAC1DC,EAAeP,iBAAeJ,EAAWH,EAAOI,EAASS,UA2B/D,MAAO,CACLC,aAAcA,EAAaD,QAC3BH,cAAeA,EAAcG,QAC7BE,eAdqB,SAACC,GACtB,OAAQA,GACN,IAAK,KACH,YATAZ,EAASS,QAAU,IAEvBT,EAASS,SAAW,GACpBC,EAAaD,QAAUV,EAAWH,EAAOI,EAASS,WAOhD,IAAK,OACH,YAlBAT,EAASS,SAAW,KAExBT,EAASS,SAAW,GACpBC,EAAaD,QAAUV,EAAWH,EAAOI,EAASS,WAgBhD,QACE,MAAM,IAAII,MAAM,oCCxDT,SAASC,IACtB,IAAMF,EAAgBT,iBAAkB,MAClCY,EAAiBZ,iBARFN,KAAKO,MAAsB,IAAhBP,KAAKQ,UAClB,IAAY,OAExB,SAcP,MAAO,CACLU,eAAgBA,EAAeN,QAC/BG,cAAeA,EAAcH,QAC7BO,qBAP2B,SAACC,GAC5BF,EAAeN,QAAUQ,GAOzBC,oBAX0B,SAACD,GAC3BL,EAAcH,QAAUQ,ICIb,SAASE,EAAYC,EAAsBC,GAAyC,IAE/FC,EAGEF,EAHFE,YAF8F,EAK5FF,EAFFG,cAAiBC,EAH6E,EAG7EA,IAAKC,EAHwE,EAGxEA,OAAQC,EAHgE,EAGhEA,KAAMC,EAH0D,EAG1DA,MACpCC,EACER,EADFQ,OAGIhC,EAAQO,iBAfAN,KAAKO,MAAsB,GAAhBP,KAAKQ,WAQkE,EAc5FS,IAJFC,EAV8F,EAU9FA,eACAH,EAX8F,EAW9FA,cACAI,EAZ8F,EAY9FA,qBACAE,EAb8F,EAa9FA,oBAb8F,EAgBxChB,EAAYN,EAAMa,SAAlEH,EAhBwF,EAgBxFA,cAAeI,EAhByE,EAgBzEA,aAAcC,EAhB2D,EAgB3DA,eAE/BkB,EAAS1B,iBAAe,KAlBkE,EAoB9E2B,mBAAiBR,EAAYS,EAAIH,GApB6C,mBAoBzFG,EApByF,KAoBtFC,EApBsF,OAqB9EF,mBAAiBR,EAAYW,EAAIL,GArB6C,mBAqBzFK,EArByF,KAqBtFC,EArBsF,KAuB1FC,EAAeC,uBAAY,WAC/B,OAAQxB,GACN,IAAK,OACH,OAAOsB,GAAK,SAAAG,GAAI,OAAIA,EAAO3B,KAC7B,IAAK,KACH,OAAOwB,GAAK,SAAAG,GAAI,OAAIA,EAAQ3B,EAAemB,EAAOpB,QAAW,OAC/D,QACE,MAAM,IAAII,MAAM,oCAEnB,CAACD,EAAeF,IAEb4B,EAAiBF,uBAAY,WACjC,OAAQrB,GACN,IAAK,OACH,OAAOiB,GAAK,SAAAO,GAAI,OAAIA,EAAQjC,EAAgBuB,EAAOpB,QAAW,OAChE,IAAK,QACH,OAAOuB,GAAK,SAAAO,GAAI,OAAIA,EAAQjC,EAAgBuB,EAAOpB,QAAW,OAChE,QACE,MAAM,IAAII,MAAM,oCAEnB,CAACE,EAAgBT,IAmCpB,OCvFK,SAAqBkC,EAAeC,GACzC,IAAMC,EAAgBvC,mBAGtBwC,qBAAU,WACRD,EAAcjC,QAAU+B,IACvB,CAACA,IAGJG,qBAAU,WAKR,GAAc,OAAVF,EAAgB,CAClB,IAAIG,EAAKC,aALX,WAEEH,EAAcjC,YAGagC,GAC3B,OAAO,kBAAMK,cAAcF,OAE5B,CAACH,IDoCJM,EAAY,WACVZ,IACAG,IACA3B,EAAeC,KACd,IAIH+B,qBAAU,WACJV,EAAa,EAATL,GAAcH,IACpBP,EAAoB,MACpB8B,YAAW,WACTnB,EAAOpB,SAAW,MACjB,KAECoB,EAAOpB,SAAW,MACpBuC,YAAW,WACT3B,EAAiBD,EAAUwB,MAC1B,OAGHX,GAAKT,GAAOd,EAAe,IAC7BQ,EAAoB,QAGlBa,EAAa,EAATH,EAAaD,GACnBX,EAAqB,QAEnBe,EAAIL,GACNV,EAAqB,YAIlB,CAAEe,IAAGE,KEhFd,IAAMgB,EAAc,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAQa,SAASC,EAAT,GAA4D,IAA5CC,EAA2C,EAA3CA,IAAK/B,EAAsC,EAAtCA,UAC5BgC,EAAWjC,EAAYC,EAD2C,EAA3BC,kBAG7C,OACE,yBACEgC,MAAO,CACLD,SAAU,WACV5B,IAAK4B,EAASnB,EACdP,KAAM0B,EAASrB,EACfuB,OAA2B,EAAnBlC,EAAUQ,OAClB2B,MAA0B,EAAnBnC,EAAUQ,OACjB4B,gBAAiBP,EAAYE,GAC7BM,aAAc,OAEhBC,UAAU,eACVC,cAAA,eAAqBR,KCzDZ,SAASS,IACtB,IAAMC,EAAe1D,iBAAO,MADM,EAER2B,mBAAsB,IAFd,mBAE3BgC,EAF2B,KAEpBC,EAFoB,OAGQjC,mBAAwB,CAChEL,OAAQ,EACRD,IAAK,EACLE,KAAM,EACNC,MAAO,IAPyB,mBAG3BJ,EAH2B,KAGZyC,EAHY,KAUlCrB,qBAAU,WACR,GAAIkB,EAAapD,QAAS,OAEaoD,EAAapD,QAAQwD,wBAAlDxC,EAFgB,EAEhBA,OAAQD,EAFQ,EAERA,IAAKE,EAFG,EAEHA,KAAMC,EAFH,EAEGA,MAC3BqC,EAAiB,CAAEvC,SAAQD,MAAKE,OAAMC,aAEvC,IAEH,IAeMN,EAAmB,SAAC6C,GACxBH,GAAS,SAAAI,GACP,IAAMC,EAAeD,EAAIE,QAAO,SAAAC,GAAE,OAAIA,EAAG1B,KAAOsB,KAChD,OAAO,YAAIE,OAIf,OACE,0BACEG,IAAKV,EACLW,QAzBgB,SAACC,GACnB,IAAM1C,EAAI0C,EAAMC,QACVzC,EAAIwC,EAAME,QACV/B,EAAK/C,KAAKO,MAAsB,IAAhBP,KAAKQ,UAC3B0D,GAAS,SAAAa,GAAC,4BACLA,GADK,CAER,CACEhC,GAAG,QAAD,OAAUA,GACZtB,YAAa,CAAES,IAAGE,KAClBV,gBACAK,OAAQ,UAgBV+B,cAAY,iBACZD,UAAU,qBAETI,EAAMe,KAAI,SAACC,EAAM3B,GAAP,OACT,kBAAC,EAAD,CAAM/B,UAAW0D,EAAMzD,iBAAkBA,EAAkB0D,IAAKD,EAAKlC,GAAIO,IAAKA,QC9CvE6B,MAVf,WACE,OACE,0BAAM3B,MAAO,CAAE4B,QAAS,OAAQC,cAAe,UAAYxB,UAAU,OACnE,gDACA,kBAAC,EAAD,MACA,6ECCcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cad5b1db.chunk.js","sourcesContent":["import { useRef } from 'react';\nimport { Direction } from './useDirection';\n\nfunction toRadians(angle: number) {\n  const radians = angle * (Math.PI / 180);\n  return radians;\n}\n\n/**\n * Creates a random start velocity between 0 and 10px\n */\nfunction randomVelocity() {\n  const velocity = Math.floor(Math.random() * 10) + 5;\n\n  return velocity;\n}\n\n/**\n * Calculate x component velocity as a function of the velocity\n * @return number\n */\nfunction xComponent(angle: number, velocity: number) {\n  const componentVelocity = velocity * Math.sin(toRadians(angle));\n\n  return componentVelocity;\n}\n\n/**\n * Calculate y component velocity as a function of the velocity\n * @return number\n */\nfunction yComponent(angle: number, velocity: number) {\n  const componentVelocity = velocity * Math.cos(toRadians(angle));\n\n  return componentVelocity;\n}\n\n/**\n * Handles the velocity of an object.\n * - returns the horizontal and vertical components of that verlocity given an angle between 0-90\n */\nexport default function useVelocity(angle: number) {\n  const velocity = useRef<number>(randomVelocity());\n  const horizVelocity = useRef<number>(xComponent(angle, velocity.current));\n  const vertVelocity = useRef<number>(yComponent(angle, velocity.current));\n\n  const increaseVelocity = () => {\n    if (velocity.current >= 20) return;\n\n    velocity.current += 0.1;\n    vertVelocity.current = yComponent(angle, velocity.current);\n  };\n\n  const decreaseVelocity = () => {\n    if (velocity.current < 0) return;\n\n    velocity.current -= 0.1;\n    vertVelocity.current = yComponent(angle, velocity.current);\n  };\n\n  const changeVelocity = (vertDirection: Direction) => {\n    switch (vertDirection) {\n      case 'UP':\n        return decreaseVelocity();\n      case 'DOWN':\n        return increaseVelocity();\n      default:\n        throw new Error('Incorrect vertDirection given');\n    }\n  };\n\n  return {\n    vertVelocity: vertVelocity.current,\n    horizVelocity: horizVelocity.current,\n    changeVelocity\n  };\n}\n","import { useRef } from 'react';\n\nexport type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';\n\nfunction randomDirection() {\n  const randomNumber = Math.floor(Math.random() * 1000);\n  if (randomNumber > 500) return 'LEFT';\n\n  return 'RIGHT';\n}\n\nexport default function useDirection() {\n  const vertDirection = useRef<Direction>('UP');\n  const horizDirection = useRef<Direction>(randomDirection());\n\n  const changeVertDirection = (direction: Direction) => {\n    vertDirection.current = direction;\n  };\n  const changeHorizDirection = (direction: Direction) => {\n    horizDirection.current = direction;\n  };\n\n  return {\n    horizDirection: horizDirection.current,\n    vertDirection: vertDirection.current,\n    changeHorizDirection,\n    changeVertDirection\n  };\n}\n","/* eslint-disable no-return-assign */\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { BallSetup } from '../components/Ball';\nimport { useInterval } from './useInterval';\nimport useVelocity from './useVelocity';\n\nimport useDirection from './useDirection';\n\n/**\n * Creates a random start angle between 0 and 45degrees\n */\nfunction randomAngle() {\n  const angle = Math.floor(Math.random() * 45);\n  return angle;\n}\n\n/**\n * Handles the movement of a ball within a container.\n * @returns Object {x: number, y: number}\n */\nexport default function useMovement(ballSetup: BallSetup, handleRemoveBall: (id: string) => void) {\n  const {\n    startCoords,\n    containerRect: { top, bottom, left, right },\n    radius\n  } = ballSetup;\n\n  const angle = useRef<number>(randomAngle());\n\n  const {\n    horizDirection,\n    vertDirection,\n    changeHorizDirection,\n    changeVertDirection\n  } = useDirection();\n\n  const { horizVelocity, vertVelocity, changeVelocity } = useVelocity(angle.current);\n\n  const energy = useRef<number>(100);\n\n  const [x, setX] = useState<number>(startCoords.x - radius);\n  const [y, setY] = useState<number>(startCoords.y - radius);\n\n  const moveVertical = useCallback(() => {\n    switch (vertDirection) {\n      case 'DOWN':\n        return setY(oldY => oldY + vertVelocity);\n      case 'UP':\n        return setY(oldY => oldY - (vertVelocity * energy.current) / 100);\n      default:\n        throw new Error('Incorrect vertDirection given');\n    }\n  }, [vertDirection, vertVelocity]);\n\n  const moveHorizontal = useCallback(() => {\n    switch (horizDirection) {\n      case 'LEFT':\n        return setX(oldX => oldX - (horizVelocity * energy.current) / 100);\n      case 'RIGHT':\n        return setX(oldX => oldX + (horizVelocity * energy.current) / 100);\n      default:\n        throw new Error('Incorrect vertDirection given');\n    }\n  }, [horizDirection, horizVelocity]);\n\n  useInterval(() => {\n    moveVertical();\n    moveHorizontal();\n    changeVelocity(vertDirection);\n  }, 16);\n\n  // change the vertDirection when the ball hits the bottom, top or has a 0 velocity\n  // NOTE: all very imperative\n  useEffect(() => {\n    if (y + radius * 2 >= bottom) {\n      changeVertDirection('UP');\n      setTimeout(() => {\n        energy.current *= 0.75;\n      }, 100);\n\n      if (energy.current <= 0.000000001) {\n        setTimeout(() => {\n          handleRemoveBall(ballSetup.id);\n        }, 500);\n      }\n    }\n    if (y <= top || vertVelocity < 0) {\n      changeVertDirection('DOWN');\n    }\n\n    if (x + radius * 2 > right) {\n      changeHorizDirection('LEFT');\n    }\n    if (x < left) {\n      changeHorizDirection('RIGHT');\n    }\n  });\n\n  return { x, y };\n}\n","/**\n * DISCLAIMER: I borrowed this hook from Dan Abramov.\n * The origional post describing it can be found [here](https://overreacted.io/making-setinterval-declarative-with-react-hooks/)\n */\n\nimport { useEffect, useRef } from 'react';\n\n/**\n * Creates a new interval with fresh arguments based on the delay.\n * - This gets around the interval closing over its values\n */\nexport function useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      //@ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport './Ball.css';\n\nimport { useMovement } from '../hooks';\nimport { ContainerRect } from './Container';\n\nexport type Position = {\n  x: number;\n  y: number;\n};\n\nexport type BallSetup = {\n  id: string;\n  containerRect: ContainerRect;\n  startCoords: Position;\n  radius: number;\n};\n\nconst BALL_COLORS = [\n  '#FF0300',\n  '#FF2000',\n  '#FF6800',\n  '#FF7000',\n  '#FF9100',\n  '#FFA900',\n  '#FFB100',\n  '#FFC800',\n  '#FFCF00',\n  '#FFE500',\n  '#FFEB00',\n  '#FFF900',\n  '#FFF900',\n  '#F6FD02',\n  '#C0F40C',\n  '#B3F10E',\n  '#A7EF10',\n  '#86E817',\n  '#7BE619',\n  '#72E41C',\n  '#57DD22',\n  '#4FDA25',\n  '#47D827',\n  '#40D629',\n  '#37C84F',\n  '#39C657',\n  '#3EC167',\n  '#40BF6E',\n  '#43BC75',\n  '#45BA7B'\n];\ntype Props = {\n  ballSetup: BallSetup;\n  idx: number;\n  handleRemoveBall: (id: string) => void;\n};\n\nexport default function Ball({ idx, ballSetup, handleRemoveBall }: Props) {\n  const position = useMovement(ballSetup, handleRemoveBall);\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        top: position.y,\n        left: position.x,\n        height: ballSetup.radius * 2,\n        width: ballSetup.radius * 2,\n        backgroundColor: BALL_COLORS[idx],\n        borderRadius: '50%'\n      }}\n      className=\"ball-wrapper\"\n      data-testid={`ball-${idx}`}\n    />\n  );\n}\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Container.css';\n\nimport Ball, { BallSetup } from './Ball';\n\nexport type ContainerRect = {\n  bottom: number;\n  top: number;\n  left: number;\n  right: number;\n};\n\nexport default function Container() {\n  const containerRef = useRef(null);\n  const [balls, setBalls] = useState<BallSetup[]>([]);\n  const [containerRect, setContainerRect] = useState<ContainerRect>({\n    bottom: 0,\n    top: 0,\n    left: 0,\n    right: 0\n  });\n\n  useEffect(() => {\n    if (containerRef.current) {\n      //@ts-ignore\n      const { bottom, top, left, right } = containerRef.current.getBoundingClientRect();\n      setContainerRect({ bottom, top, left, right });\n    }\n  }, []);\n\n  const handleClick = (event: any) => {\n    const x = event.clientX; // - rect.x;\n    const y = event.clientY; // - rect.y;\n    const id = Math.floor(Math.random() * 1000000);\n    setBalls(b => [\n      ...b,\n      {\n        id: `ball-${id}`,\n        startCoords: { x, y },\n        containerRect,\n        radius: 15\n      }\n    ]);\n  };\n\n  const handleRemoveBall = (ballId: string) => {\n    setBalls(bls => {\n      const updatedBalls = bls.filter(bl => bl.id !== ballId);\n      return [...updatedBalls];\n    });\n  };\n\n  return (\n    <main\n      ref={containerRef}\n      onClick={handleClick}\n      data-testid=\"ball-container\"\n      className=\"container-wrapper\"\n    >\n      {balls.map((ball, idx) => (\n        <Ball ballSetup={ball} handleRemoveBall={handleRemoveBall} key={ball.id} idx={idx} />\n      ))}\n    </main>\n  );\n}\n","/* eslint-disable react/no-unescaped-entities */\nimport React from 'react';\nimport './App.css';\n\nimport Container from './Container';\n\nfunction App() {\n  return (\n    <main style={{ display: 'flex', flexDirection: 'column' }} className=\"App\">\n      <h1>Yieldify Bouncey</h1>\n      <Container />\n      <p>Click the rectangle to see your balls bounce</p>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}